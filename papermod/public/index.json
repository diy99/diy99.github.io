[{"content":"Hugo特色 Hugo 是用 Go 編寫的靜態網站生成器，一般只需幾秒鐘就能生成一個網站，被稱為「世界上最快的網站構建框架」，也使 Hugo 大受歡迎，成為最熱門的靜態網站生成器之一，被廣泛採用。\n\u0026nbsp; 啟動 hugo server 後，寫文章時，網頁瀏覽器就能即時反應成果，不用(重新載入頁面) 。\n安裝 \u0026nbsp;Windows 作業系統 \u0026nbsp;安裝Git Bash \u0026nbsp;前往Hugo的GitHub下載 hugo_extended_0.118.2_windows-amd64.zip (我下載時的版本)，若看不到 hugo_extended_0.xxx.x_windows-amd64.zip， 按 Show all 23 assets。 \u0026nbsp;解壓縮後，如同wget安裝，將hugo.exe移至 D:\\App\\PortableGit\\usr\\bin\n\u0026nbsp;Arch Linux 作業系統\nsudo pacman -S git hugo \u0026nbsp;其它作業系統，可參閱 Installation | Hugo\n建立網站與安裝主題 \u0026nbsp;參考自 Hugo-Quick Start及PaperMod-Installation \u0026nbsp;建立 D:\\MyData 資料夾，勿存放資料於 D:\\App\\PortableGit 內。於 git-bash 貼上cd \u0026quot;D:\\MyData\u0026quot; \u0026nbsp;建立資料夾網站 blog，於 git-bash 貼上hugo new site blog \u0026nbsp;以檔案總管觀察，blog資料夾內有8個子資料夾及hugo.toml，8個子資料夾只有archetypes內有default.md，其它7個空無一物。default.md及hugo.toml內容很少，正等待修改。空資料夾，正待補充！ \u0026nbsp;於 git-bash 貼上cd blog \u0026nbsp;可於 Notepad++ 記下cd \u0026quot;D:\\MyData\\blog\u0026quot;，下次啟動git-bash時貼上 \u0026nbsp;安裝PaperMod主題 \u0026nbsp;於 git-bash 貼上\ngit clone https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth=1 \u0026nbsp;刪除 hugo.toml \u0026nbsp;將代碼(修改自PaperMod-Sample config.yml)存至 D:\\MyData\\blog\\config.yml，詳細資料可參閱 Configure Hugo \u0026nbsp;第1行baseURL: \u0026quot;https://examplesite.com/\u0026quot;改為你的\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 baseURL: \u0026#34;https://examplesite.com/\u0026#34; title: ExampleSite defaultContentLanguage: zh-tw paginate: 5 # 每頁顯示的文章數 theme: PaperMod enableRobotsTXT: true # 是否生成 robots.txt 檔案 buildDrafts: false buildFuture: false buildExpired: false googleAnalytics: UA-123-45 minify: disableXML: true minifyOutput: true params: env: production # to enable google analytics, opengraph, twitter-cards and schema. title: ExampleSite description: \u0026#34;ExampleSite description\u0026#34; keywords: [Blog, Portfolio, PaperMod] author: Me # author: [\u0026#34;Me\u0026#34;, \u0026#34;You\u0026#34;] # multiple authors images: [\u0026#34;\u0026lt;link or path of image for opengraph, twitter-cards\u0026gt;\u0026#34;] DateFormat: \u0026#34;2006-01-02\u0026#34; defaultTheme: auto # dark, light disableThemeToggle: false ShowReadingTime: true ShowShareButtons: true # 顯示分享文章按鈕 ShowPostNavLinks: true ShowBreadCrumbs: true ShowCodeCopyButtons: true # 顯示代碼複製按鈕 ShowWordCount: true ShowRssButtonInSectionTermList: true UseHugoToc: true disableSpecial1stPost: false disableScrollToTop: false comments: false # 評論 hidemeta: false # 是否隱藏文章發布日期、作者... hideSummary: false showtoc: true # 是否顯示目錄 tocopen: true # 是否打開目錄 assets: # disableHLJS: true # to disable highlight.js # disableFingerprinting: true favicon: \u0026#34;\u0026lt;link / abs url\u0026gt;\u0026#34; favicon16x16: \u0026#34;\u0026lt;link / abs url\u0026gt;\u0026#34; favicon32x32: \u0026#34;\u0026lt;link / abs url\u0026gt;\u0026#34; apple_touch_icon: \u0026#34;\u0026lt;link / abs url\u0026gt;\u0026#34; safari_pinned_tab: \u0026#34;\u0026lt;link / abs url\u0026gt;\u0026#34; label: text: \u0026#34;Home\u0026#34; icon: /apple-touch-icon.png iconHeight: 35 # profile-mode profileMode: enabled: false # needs to be explicitly set title: ExampleSite subtitle: \u0026#34;This is subtitle\u0026#34; imageUrl: \u0026#34;\u0026lt;img location\u0026gt;\u0026#34; imageWidth: 120 imageHeight: 120 imageTitle: my image buttons: - name: Posts url: posts - name: Tags url: tags # home-info mode homeInfoParams: Title: \u0026#34;Hi there \\U0001F44B\u0026#34; Content: Welcome to my blog socialIcons: - name: twitter url: \u0026#34;https://twitter.com/\u0026#34; - name: email url: \u0026#34;mailto:\u0026#34; - name: github url: \u0026#34;https://github.com/\u0026#34; analytics: google: SiteVerificationTag: \u0026#34;XYZabc\u0026#34; bing: SiteVerificationTag: \u0026#34;XYZabc\u0026#34; yandex: SiteVerificationTag: \u0026#34;XYZabc\u0026#34; cover: hidden: true # hide everywhere but not in structured data hiddenInList: true # hide on list pages and home hiddenInSingle: false # hide on single page # for search # https://fusejs.io/api/options.html fuseOpts: isCaseSensitive: false shouldSort: true location: 0 distance: 1000 threshold: 0.4 minMatchCharLength: 0 keys: [\u0026#34;title\u0026#34;, \u0026#34;permalink\u0026#34;, \u0026#34;summary\u0026#34;, \u0026#34;content\u0026#34;] menu: main: - identifier: categories name: categories url: /categories/ weight: 10 - identifier: tags name: tags url: /tags/ weight: 20 - identifier: example name: example.org url: https://example.org weight: 30 # Read: https://github.com/adityatelange/hugo-PaperMod/wiki/FAQs#using-hugos-syntax-highlighter-chroma pygmentsUseClasses: true markup: highlight: noClasses: false # anchorLineNos: true # codeFences: true # guessSyntax: true # lineNos: true # style: monokai 建立文章 \u0026nbsp;建立文章可參閱 写文章 的詳盡解釋 \u0026nbsp;於 git-bash 貼上hugo new \u0026quot;posts/Hello World.md\u0026quot; \u0026nbsp;編輯 \\content\\posts\\Hello World.md (省略了D:\\MyData\\blog)，增加兩行\nHello World! ![](https://image.myanimelist.net/ui/BQM6jEZ-UJLgGUuvrNkYUHU1vZBDZ-VTzDhDozp-dH4brc97bzEKibhYrRXD3jZj2Xz-1yT9pOx1fs0V7vHAHQ#center) 本地主機預覽網站 \u0026nbsp;於 git-bash 貼上hugo server -D \u0026nbsp;開啟瀏覽器，網址貼上 localhost:1313 \u0026nbsp;可於 git-bash 按 Ctrl+C 停止 hugo server\n生成靜態網站 生成靜態網頁於public資料夾內。列出常用的生成方法，參考自 Draft, future, and expired content及启动博客 \u0026nbsp;於 git-bash 貼上hugo \u0026nbsp;生成方式只會往public資料夾裡添加內容，但是不會刪除外部已經不存在而public裡面還存在的檔案，不含草稿文章 \u0026nbsp;於 git-bash 貼上hugo -D \u0026nbsp;生成方式包含草稿文章 \u0026nbsp;於 git-bash 貼上hugo -F --cleanDestinationDir \u0026nbsp;生成的public都是全新的，會覆蓋原來的\n上傳到 GitHub Pages \u0026nbsp;先完成GitHub SSH 連線 \u0026nbsp;前往 https://github.com/new 建立 GitHub Repository \u0026nbsp;Repository name 一定要填入 your-username.github.io，例如我的 username 是 diy99，則建立資源庫名稱就要使用 diy99.github.io，設為Public 按 Create repository \u0026nbsp;於 git-bash 逐行執行下列指令，詳細解釋可參閱 部署 - GitHub Pages \u0026nbsp;diy99/diy99.github.io.git 改為你的\n1 2 3 4 5 6 7 8 cd public git init git remote add origin git@github.com:diy99/diy99.github.io.git git add . git commit -m \u0026#39;Update\u0026#39; git branch -M main git push -u origin main cd .. \u0026nbsp;將指令執行過程存為 D:\\MyData\\blog\\publish.sh，以後只要 sh publish.sh 即可(Windows 作業系統不用 chmod +x publish.sh)\n1 2 3 4 5 6 7 8 9 10 11 12 13 #!/bin/bash # Linux: chmod +x publish.sh # sh publish.sh hugo cd public git init # diy99/diy99.github.io.git 改為你的 git remote add origin git@github.com:diy99/diy99.github.io.git git add . git commit -m \u0026#39;Update\u0026#39; git branch -M main git push -u origin main cd .. \u0026nbsp;瀏覽網站 https://your-username.github.io\n文章的 Front Matter \u0026nbsp;本段內容參考資料 \u0026nbsp;貼身打造個人部落格 - 02. 文章 Front Matter \u0026nbsp;PaperMod-Sample Page.md \u0026nbsp;写文章 \u0026nbsp;Front matter | Hugo\n\u0026nbsp;Front Matter 指的是: 每篇文章檔案內容中，放在最前面那塊以---分隔的內容。 \u0026nbsp;建立新文章(hugo new \u0026ldquo;posts/My First Post.md\u0026rdquo;)時，Hugo會從 \\archetypes (省略了D:\\MyData\\blog) 複製模板 default.md 新建文章；被建立文章的 Front Matter 中參數方便客製化文章要如何顯示，或是做其他運用，例如文章網址設置，SEO 關鍵字設置等。 \u0026nbsp;將底下代碼取代 \\archetypes\\default.md 的內容 \u0026nbsp;實際上，新建文章時，你可能要小部分更改\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 --- title: \u0026#39;{{ replace .File.ContentBaseName \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#39; date: {{ .Date }} draft: false # 文章草稿狀態 summary: \u0026#34;\u0026#34; # 首頁顯示的文字總結段落 categories: [\u0026#34;分類1\u0026#34;, \u0026#34;分類2\u0026#34;] tags: [\u0026#34;標籤1\u0026#34;, \u0026#34;標籤2\u0026#34;] #author: [\u0026#34;Author\u0026#34;] #keywords: [Blog, PaperMod] # 標示文章的關鍵字 description: \u0026#34;\u0026#34; #描述 weight: # 輸入1可以置頂文章，不填就按時間 isCJKLanguage: true # 是否是中文(chinese,japanese,korea) 字數判斷用 comments: false #是否展示評論 showToc: true # 顯示目錄 TocOpen: true # 自動打開目錄 UseHugoToc: true hidemeta: false # 是否隱藏發布日期、作者 disableShare: false # 取消社群分享文章欄 showbreadcrumbs: true # 於頂部顯示文章路徑 ShowWordCounts: true ShowReadingTime: true cover: image: \u0026#34;\u0026#34; # 封面圖片路徑 alt: \u0026#34;\u0026lt;alt text\u0026gt;\u0026#34; # alt text caption: \u0026#34;\u0026#34; # 封面圖片描述 relative: false # when using page bundles set this to true hidden: true # only hide on current single page --- \u0026nbsp;我在 config.yml 設置 author: [\u0026ldquo;Jang\u0026rdquo;] ，所以網站文章預設作者是 Jang，本篇文章的 Front Matter 設置 author: [\u0026ldquo;Shakespeare\u0026rdquo;] ，所以…😊\n\u0026nbsp;以 Notepad++ 記下\ncd \u0026#34;D:\\MyData\\blog\u0026#34; hugo new \u0026#34;posts/Hello World.md\u0026#34; hugo server -D localhost:1313 \u0026nbsp;Git Bash 可以使用方向鍵\u0026nbsp;\u0026nbsp;存取先前輸入的指令 ","permalink":"https://diy99.github.io/papermod/posts/hugo-papermod/","summary":"Hugo特色 Hugo 是用 Go 編寫的靜態網站生成器，一般只需幾秒鐘就能生成一個網站，被稱為「世界上最快的網站構建框架」，也使 Hugo 大受歡迎，成為最熱門的靜","title":"📌 Hugo PaperMod 與 GitHub Pages"},{"content":"Git Bash名稱 Git for Windows 提供了BASH模擬，用於從命令列執行 Git，啟動程式是 git-bash.exe。 Git Bash 提供源自 Linux/Unix 指令操作Window 檔案系統，更可以將靜態網頁 Push 上傳到 GitHub。\n安裝 \u0026nbsp;建立D:\\App資料夾(選擇性) \u0026nbsp;前往 Git - Downloading Packag，按 64-bit Git for Windows Portable 下載 \u0026nbsp;開啟 PortableGit-2.42.0.2-64-bit.7z.exe (我下載時的版本，這是以7-Zip打包的可執行檔)，將安裝的資料夾改為 D:\\App\\PortableGit ➜ 按 [OK] \u0026nbsp;複製D:\\App\\PortableGit\\內的git-bash.exe，至上一層D:\\App，貼上捷徑\n開啟 git-bash 作設定 \u0026nbsp;按滑鼠右鍵 \u0026nbsp;按 [Window] ➜ UI language 選取 [zh_TW] ➜ 按 [Apply] ➜ 按 [Save] \u0026nbsp;輸入 echo $PATH (可複製再貼至git-bash)，git-bash的複製、貼上快速鍵分別為 Ctrl+Ins、Shift+Ins wget 安裝與測試 \u0026nbsp;前往GNU Wget下載 x64 EXE \u0026nbsp;由 echo $PATH 得知將 wget.exe 移至 D:\\App\\PortableGit\\usr\\bin\\ 內 \u0026nbsp;於 git-bash 貼上wget https://diii.neocities.org/img/git02.webp下載上一張圖片做測試\n執行Bash \u0026nbsp;將底下 shell script 以原始碼編輯器(如Notepad++)存至 D:\\App\\PortableGit\\hello.sh，於 git-bash 貼上sh hello.sh執行( Windows 不需chmod +x hello.sh)\n#!/bin/bash Reset=$(tput sgr0) Blue=$(tput setaf 4) echo -e \u0026#34;Hello ${Blue}World${Reset}!\u0026#34; \u0026nbsp;如同cmd快速進入中文資料夾，於 git-bash 貼上cd \u0026quot;D:\\相簿\\登山\u0026quot; GitHub SSH 連線 \u0026nbsp;如果檔案不上傳至 GitHub，以下操作可不作😁。 \u0026nbsp;前往 GitHub 註冊，連線有 SSH 與 HTTPS 兩種，底下只說明 SSH 方法，更多資訊可參閱使用 SSH 连接到 GitHub \u0026nbsp;設定使用者的 Email 及使用者名稱，可再參閱使用者設定 \u0026nbsp;於 git-bash 貼上git config --global user.email \u0026quot;you@example.com\u0026quot; ，you@example.com 改為你的 \u0026nbsp;於 git-bash 貼上git config --global user.name \u0026quot;Your Name\u0026quot; ，Your Name 改為你的 \u0026nbsp;生成 SSH 公鑰匙和私鑰匙 \u0026nbsp;於 git-bash 貼上ssh-keygen，會在 C:\\Users\\your_name\\.ssh 資料夾裡生成 id_rsa, id_rsa.pub 兩個檔案。id_rsa.pub是公開金鑰，id_rsa是私密金鑰 \u0026nbsp;於 git-bash 貼上cat ~/.ssh/id_rsa.pub顯示剛剛建立的公鑰，並且複製。 \u0026nbsp;id_rsa.pub 也可以使用Notepad++開啟。 \u0026nbsp;將 公鑰 貼到 GitHub SSH keys \u0026nbsp;按 New SSH key ➜ 於 Key 欄位 貼上 ➜ 按 Add SSH key \u0026nbsp;測試 GitHub SSH 連線 \u0026nbsp;於 git-bash 貼上ssh -T git@github.com，過程如下：\nAre you sure you want to continue connecting (yes/no/[fingerprint])? 輸入 yes\nWarning: Permanently added 'github.com' (ED25519) to the list of known hosts. Hi diy99! You've successfully authenticated, but GitHub does not provide shell access.\n","permalink":"https://diy99.github.io/papermod/posts/git-bash/","summary":"Git Bash名稱 Git for Windows 提供了BASH模擬，用於從命令列執行 Git，啟動程式是 git-bash.exe。 Git Bash 提供源自 Linux/Unix 指令操作Window 檔案系","title":"Git Bash"},{"content":"原始碼編輯器的功能 工欲善其事，必先利其器。🙂雜七雜八的記事與🙃寫程式免不了使用原始碼編輯器(source code editor)，我已習慣Notepad++，Visual Studio Code也很好用。cmd命令可輕鬆於Notepad++編輯，再貼至cmd執行。更可編輯Git Bash命令，再貼至Git Bash執行。 \u0026nbsp;建立D:\\App資料夾\n下載與安裝 \u0026nbsp;前往Notepad++ 選取您要的版本，選取 64-bit x64 之Portable (zip) ，我下載時為npp.8.5.6.portable.x64.zip，解壓縮至D:\\App\\Notepad++(可複製) 按 解壓縮(E) 於D:\\App資料夾增加Notepad++捷徑 \u0026nbsp; 以檔案總管複製D:\\App\\Notepad++\\內的notepad++.exe，至上一層D:\\App，按滑鼠右鍵，貼上捷徑(S) 開啟Notepad++作設定 \u0026nbsp;滑鼠選取notepad++ - 捷徑，按 Enter。 \u0026nbsp;按 [Settings] ➜ 按 [Preferences] ➜ Localization 選取 [台灣繁體] ➜ 按 [儲存並關閉] \u0026nbsp;按 [外掛] ➜ 按 [管理外掛模組] ➜ 勾選 [Explorer] \u0026nbsp;按右上角 [安裝] ➜ 按 [是] \u0026nbsp;按 [外掛] ➜ [Explorer] ➜ 按 [Explorer] \u0026nbsp;按 [設定 ] ➜ [偏好設定] ➜ 雲端連結 ➜ 取消勾選 [將連結設為可點擊] ➜ 按 [儲存並關閉]\n編輯區字型與字體 \u0026nbsp;按 [設定] ➜ 按 [語法配置樣式器\u0026hellip;] ➜ 樣式: 選取 Default Stlye ➜ 字型名稱 (選取你要的) ➜ 字型大小 (選取你要的) ➜ 按 [儲存並關閉]\n","permalink":"https://diy99.github.io/papermod/posts/notepad++/","summary":"原始碼編輯器的功能 工欲善其事，必先利其器。🙂雜七雜八的記事與🙃寫程式免不了使用原始碼編輯器(source code editor)，我已習慣Notep","title":"Notepad++"},{"content":"建立D:\\App資料夾 \u0026nbsp;建立 D:\\App資料夾 存放應用程式(application program，簡寫為APP)與捷徑，沒有D槽可參閱硬碟分割與調整 \u0026nbsp;以檔案總管將D:\\App釘選到 快速存取，或在桌面建立D:\\App資料夾捷徑\n建立cmd捷徑 \u0026nbsp;於D:\\App新增捷徑，複製 C:\\Windows\\System32\\cmd.exe 至 [輸入項目的位置] ➜ 按 [下一步] ➜ 按 [完成] \u0026nbsp;選取 cmd，按滑鼠右鍵，按[內容(R)]，於[開始位置(S)]輸入 D:\\ (∵要使用D槽)，按 [確定] 開啟cmd \u0026nbsp;滑鼠選取 cmd，按 Enter💯(也可以滑鼠左鍵連按兩下 這種操作不太好)，爾後就很容易至D:\\App快速開啟cmd。 cmd快速進入中文資料夾 \u0026nbsp;例如: 檔案總管建立 D:\\相簿\\登山 資料夾，按 網址列，按 Ctrl+C 複製 \u0026nbsp;貼至 原始碼編輯器(如Notepad++) ，再編輯為cd \u0026quot;D:\\相簿\\登山\u0026quot; \u0026nbsp;自Notepad++複製cd \u0026quot;D:\\相簿\\登山\u0026quot;，貼至cmd，按 Enter。 \u0026nbsp;Linux終端(terminal)也可以快速進入目錄，下圖 Arch Linux LXQt桌面 ","permalink":"https://diy99.github.io/papermod/posts/app-folder/","summary":"建立D:\\App資料夾 \u0026nbsp;建立 D:\\App資料夾 存放應用程式(application program，簡寫為APP)與捷徑，沒有D槽可","title":"應用程式APP資料夾"},{"content":"一般而言，安裝Windows時，就只有C槽。硬碟分割與調整工具可以增加D槽以存放可攜式(portable,又稱免安裝)程式及資料，我的Windows系統只分配60G。要安裝Windows、Arch Linux雙系統時，也須使用硬碟分割工具，因此本文就特別重要。\n✨MiniTool® Partition Wizard Free 💡 可以將硬碟MBR轉換為GPT並保留所有檔案\n下載MiniTool® Partition Wizard Free MiniTool Partition Wizard 教學\n✨IM-Magic Partition Resizer 💡 IM-Magic Partition Resizer 官網 下載IM-Magic Partition Resizer Free(portable)，含中文版\n✨AOMEI Partition Assistant 下載AOMEI Partition Assistant AOMEI Partition Assistant教學\n✨GParted 下載GParted GParted教學\n","permalink":"https://diy99.github.io/papermod/posts/disk-partition/","summary":"一般而言，安裝Windows時，就只有C槽。硬碟分割與調整工具可以增加D槽以存放可攜式(portable,又稱免安裝)程式及資料，我的Win","title":"硬碟分割與調整"}]